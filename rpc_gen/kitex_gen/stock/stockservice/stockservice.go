// Code generated by Kitex v0.9.1. DO NOT EDIT.

package stockservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	stock "github.com/suutest/rpc_gen/kitex_gen/stock"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"BatchGetStocks": kitex.NewMethodInfo(
		batchGetStocksHandler,
		newBatchGetStocksArgs,
		newBatchGetStocksResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"DeductStocks": kitex.NewMethodInfo(
		deductStocksHandler,
		newDeductStocksArgs,
		newDeductStocksResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"OccupyStocks": kitex.NewMethodInfo(
		occupyStocksHandler,
		newOccupyStocksArgs,
		newOccupyStocksResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RecoverStocks": kitex.NewMethodInfo(
		recoverStocksHandler,
		newRecoverStocksArgs,
		newRecoverStocksResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	stockServiceServiceInfo                = NewServiceInfo()
	stockServiceServiceInfoForClient       = NewServiceInfoForClient()
	stockServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return stockServiceServiceInfo
}

// for client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return stockServiceServiceInfoForStreamClient
}

// for stream client
func serviceInfoForClient() *kitex.ServiceInfo {
	return stockServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "StockService"
	handlerType := (*stock.StockService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "stock",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.9.1",
		Extra:           extra,
	}
	return svcInfo
}

func batchGetStocksHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(stock.GetStocksReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(stock.StockService).BatchGetStocks(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *BatchGetStocksArgs:
		success, err := handler.(stock.StockService).BatchGetStocks(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*BatchGetStocksResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newBatchGetStocksArgs() interface{} {
	return &BatchGetStocksArgs{}
}

func newBatchGetStocksResult() interface{} {
	return &BatchGetStocksResult{}
}

type BatchGetStocksArgs struct {
	Req *stock.GetStocksReq
}

func (p *BatchGetStocksArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(stock.GetStocksReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *BatchGetStocksArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *BatchGetStocksArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *BatchGetStocksArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *BatchGetStocksArgs) Unmarshal(in []byte) error {
	msg := new(stock.GetStocksReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var BatchGetStocksArgs_Req_DEFAULT *stock.GetStocksReq

func (p *BatchGetStocksArgs) GetReq() *stock.GetStocksReq {
	if !p.IsSetReq() {
		return BatchGetStocksArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *BatchGetStocksArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BatchGetStocksArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BatchGetStocksResult struct {
	Success *stock.GetStocksResp
}

var BatchGetStocksResult_Success_DEFAULT *stock.GetStocksResp

func (p *BatchGetStocksResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(stock.GetStocksResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *BatchGetStocksResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *BatchGetStocksResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *BatchGetStocksResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *BatchGetStocksResult) Unmarshal(in []byte) error {
	msg := new(stock.GetStocksResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *BatchGetStocksResult) GetSuccess() *stock.GetStocksResp {
	if !p.IsSetSuccess() {
		return BatchGetStocksResult_Success_DEFAULT
	}
	return p.Success
}

func (p *BatchGetStocksResult) SetSuccess(x interface{}) {
	p.Success = x.(*stock.GetStocksResp)
}

func (p *BatchGetStocksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BatchGetStocksResult) GetResult() interface{} {
	return p.Success
}

func deductStocksHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(stock.DeductStocksReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(stock.StockService).DeductStocks(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *DeductStocksArgs:
		success, err := handler.(stock.StockService).DeductStocks(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*DeductStocksResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newDeductStocksArgs() interface{} {
	return &DeductStocksArgs{}
}

func newDeductStocksResult() interface{} {
	return &DeductStocksResult{}
}

type DeductStocksArgs struct {
	Req *stock.DeductStocksReq
}

func (p *DeductStocksArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(stock.DeductStocksReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *DeductStocksArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *DeductStocksArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *DeductStocksArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *DeductStocksArgs) Unmarshal(in []byte) error {
	msg := new(stock.DeductStocksReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var DeductStocksArgs_Req_DEFAULT *stock.DeductStocksReq

func (p *DeductStocksArgs) GetReq() *stock.DeductStocksReq {
	if !p.IsSetReq() {
		return DeductStocksArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *DeductStocksArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *DeductStocksArgs) GetFirstArgument() interface{} {
	return p.Req
}

type DeductStocksResult struct {
	Success *stock.DeductStocksResp
}

var DeductStocksResult_Success_DEFAULT *stock.DeductStocksResp

func (p *DeductStocksResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(stock.DeductStocksResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *DeductStocksResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *DeductStocksResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *DeductStocksResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *DeductStocksResult) Unmarshal(in []byte) error {
	msg := new(stock.DeductStocksResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *DeductStocksResult) GetSuccess() *stock.DeductStocksResp {
	if !p.IsSetSuccess() {
		return DeductStocksResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DeductStocksResult) SetSuccess(x interface{}) {
	p.Success = x.(*stock.DeductStocksResp)
}

func (p *DeductStocksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DeductStocksResult) GetResult() interface{} {
	return p.Success
}

func occupyStocksHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(stock.OccupyStocksReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(stock.StockService).OccupyStocks(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *OccupyStocksArgs:
		success, err := handler.(stock.StockService).OccupyStocks(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*OccupyStocksResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newOccupyStocksArgs() interface{} {
	return &OccupyStocksArgs{}
}

func newOccupyStocksResult() interface{} {
	return &OccupyStocksResult{}
}

type OccupyStocksArgs struct {
	Req *stock.OccupyStocksReq
}

func (p *OccupyStocksArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(stock.OccupyStocksReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *OccupyStocksArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *OccupyStocksArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *OccupyStocksArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *OccupyStocksArgs) Unmarshal(in []byte) error {
	msg := new(stock.OccupyStocksReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var OccupyStocksArgs_Req_DEFAULT *stock.OccupyStocksReq

func (p *OccupyStocksArgs) GetReq() *stock.OccupyStocksReq {
	if !p.IsSetReq() {
		return OccupyStocksArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *OccupyStocksArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OccupyStocksArgs) GetFirstArgument() interface{} {
	return p.Req
}

type OccupyStocksResult struct {
	Success *stock.OccupyStocksResp
}

var OccupyStocksResult_Success_DEFAULT *stock.OccupyStocksResp

func (p *OccupyStocksResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(stock.OccupyStocksResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *OccupyStocksResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *OccupyStocksResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *OccupyStocksResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *OccupyStocksResult) Unmarshal(in []byte) error {
	msg := new(stock.OccupyStocksResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *OccupyStocksResult) GetSuccess() *stock.OccupyStocksResp {
	if !p.IsSetSuccess() {
		return OccupyStocksResult_Success_DEFAULT
	}
	return p.Success
}

func (p *OccupyStocksResult) SetSuccess(x interface{}) {
	p.Success = x.(*stock.OccupyStocksResp)
}

func (p *OccupyStocksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *OccupyStocksResult) GetResult() interface{} {
	return p.Success
}

func recoverStocksHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(stock.RecoverStocksReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(stock.StockService).RecoverStocks(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RecoverStocksArgs:
		success, err := handler.(stock.StockService).RecoverStocks(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RecoverStocksResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRecoverStocksArgs() interface{} {
	return &RecoverStocksArgs{}
}

func newRecoverStocksResult() interface{} {
	return &RecoverStocksResult{}
}

type RecoverStocksArgs struct {
	Req *stock.RecoverStocksReq
}

func (p *RecoverStocksArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(stock.RecoverStocksReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RecoverStocksArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RecoverStocksArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RecoverStocksArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RecoverStocksArgs) Unmarshal(in []byte) error {
	msg := new(stock.RecoverStocksReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RecoverStocksArgs_Req_DEFAULT *stock.RecoverStocksReq

func (p *RecoverStocksArgs) GetReq() *stock.RecoverStocksReq {
	if !p.IsSetReq() {
		return RecoverStocksArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RecoverStocksArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RecoverStocksArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RecoverStocksResult struct {
	Success *stock.RecoverStocksResp
}

var RecoverStocksResult_Success_DEFAULT *stock.RecoverStocksResp

func (p *RecoverStocksResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(stock.RecoverStocksResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RecoverStocksResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RecoverStocksResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RecoverStocksResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RecoverStocksResult) Unmarshal(in []byte) error {
	msg := new(stock.RecoverStocksResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RecoverStocksResult) GetSuccess() *stock.RecoverStocksResp {
	if !p.IsSetSuccess() {
		return RecoverStocksResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RecoverStocksResult) SetSuccess(x interface{}) {
	p.Success = x.(*stock.RecoverStocksResp)
}

func (p *RecoverStocksResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RecoverStocksResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) BatchGetStocks(ctx context.Context, Req *stock.GetStocksReq) (r *stock.GetStocksResp, err error) {
	var _args BatchGetStocksArgs
	_args.Req = Req
	var _result BatchGetStocksResult
	if err = p.c.Call(ctx, "BatchGetStocks", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeductStocks(ctx context.Context, Req *stock.DeductStocksReq) (r *stock.DeductStocksResp, err error) {
	var _args DeductStocksArgs
	_args.Req = Req
	var _result DeductStocksResult
	if err = p.c.Call(ctx, "DeductStocks", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) OccupyStocks(ctx context.Context, Req *stock.OccupyStocksReq) (r *stock.OccupyStocksResp, err error) {
	var _args OccupyStocksArgs
	_args.Req = Req
	var _result OccupyStocksResult
	if err = p.c.Call(ctx, "OccupyStocks", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RecoverStocks(ctx context.Context, Req *stock.RecoverStocksReq) (r *stock.RecoverStocksResp, err error) {
	var _args RecoverStocksArgs
	_args.Req = Req
	var _result RecoverStocksResult
	if err = p.c.Call(ctx, "RecoverStocks", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
